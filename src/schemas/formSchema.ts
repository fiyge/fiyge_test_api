import { z } from 'zod';
import {PaginateSchema} from "./indexSchema.ts";

export const RuleSchema = z.object({
    if_condition: z.string(),
    permission: z.string().nullable().optional(),
    id: z.string().nullable().optional(),
    deleted: z.string().nullable().optional(),
    is_active: z.string().nullable().optional(),
});

const ListQuerySchema = z.object({
    method: z.string().nullable().optional(),
    fields: z.array(z.string()).nullable().optional(),
    active_level: z.string().nullable().optional(),
    where: z.record(z.string(), z.string()).nullable().optional(),
    parent_where: z.record(z.string(), z.string()).nullable().optional(),
});

const RolePermissionSchema = z.object({
    permission: z.string(),
});

// @ts-ignore
export const FormChildSchema = z.object({
    record_display_name: z.any().nullable().optional(),
    name: z.array(z.string()).nullable().optional(),
    label: z.string().nullable().optional(),
    colspan: z.string().nullable().optional(),
    not_empty: z.string().nullable().optional(),
    is_web_compatible: z.union([z.string(), z.number()]).nullable().optional(),
    is_mobile_compatible: z.union([z.string(), z.number()]).nullable().optional(),
    helper: z.string().nullable().optional(),
    method: z.string().nullable().optional(),
    // field_collection: z.string().optional(),
    // allow_copy_to_clipboard: z.string().optional(),
    template: z.string(),
    packaged_with_module: z.string().nullable().optional(),
    // mw: z.boolean().optional(),
    // @ts-ignore
    children: z.lazy(() => z.array(FormChildSchema)).nullable().optional(),
    // rules_grid: z.string().optional(),
    // roles_grid: z.string().optional(),
    // disable_autofill_while_cloning: z.string().optional(),
    // allow_user_to_specify_user_level_default: z.string().optional(),
    business_key: z.string().nullable().optional(),
    // __name: z.string().optional(),
    // inline_search: z.string().optional(),
    select: z.string().nullable().optional(),
    open: z.string().nullable().optional(),
    // show_model: z.string().optional(),
    // show_link: z.string().optional(),
    // concat_text_value: z.string().optional(),
    // postfix_label: z.string().optional(),
    // prefix_id: z.string().optional(),
    value: z.union([z.string(), z.number()]).nullable().optional(),
    // value_model: z.string().optional(),
    __value: z.union([z.string(), z.number()]).nullable().optional(),
    // on_change_reload_form: z.string().optional(),
    permission: z.union([z.string(), z.number()]).nullable().optional(),
    filter_by_fields: z.string().nullable().optional(),
    __filter_by_fields: z.string().nullable().optional(),
    help: z.string().nullable().optional(),
    tooltip: z.string().nullable().optional(),
    editor: z.string().nullable().optional(),
    // ai_provider_id_model: z.string().optional(),
    // auto_resize: z.string().optional(),
    // allow_commenting_on_this_field: z.string().optional(),
    rules: z.array(RuleSchema).nullable().optional(),
    load_menu: z.string().nullable().optional(),
    listview: z.string().nullable().optional(),
    // listview_model: z.string().optional(),
    // __listview: z.string().optional(),
    // pfooter: z.string().optional(),
    // value_1: z.string().optional(),
    // value_2: z.string().optional(),
    // is_first_level_filter: z.string().optional(),
    // pheader: z.string().optional(),
    // hide_listview_link: z.string().optional(),
    // show_in_draft_mode: z.string().optional(),
    // disable_search: z.string().optional(),
    // show_opened: z.string().optional(),
    // append_main_model_filter: z.string().optional(),
    module: z.string().nullable().optional(),
    controller: z.string().nullable().optional(),
    // action: z.string().optional(),
    // web_compatible: z.string().optional(),
    // mobile_compatible: z.string().optional(),
    sub_form_model_class: z.string().nullable().optional(),
    sub_form_name: z.string().nullable().optional(),
    // overwrite_sub_form_model: z.string().optional(),
    // show_collapsed: z.string().optional(),
    // description: z.string().optional(),
    placeholder: z.string().nullable().optional(),
    primary_key: z.string().nullable().optional(),
    q: ListQuerySchema.nullable().optional(),
    string: z.string().nullable().optional(),
    href: z.string().nullable().optional(),
    model: z.string().nullable().optional(),
    text: z.string().nullable().optional(),
    lookup: z.string().nullable().optional(),
    lookup_class: z.string().nullable().optional(),
    roles: z.record(z.string(), RolePermissionSchema).nullable().optional(),
    add_button_bar: z.string().nullable().optional(),
    allow_row_create: z.string().nullable().optional(),
    allow_row_delete: z.string().nullable().optional(),
    js_statements: z.string().nullable().optional(),
    js_formula: z.string().nullable().optional(),
    show_labels: z.string().nullable().optional(),
    min: z.string().nullable().optional(),
    max: z.string().nullable().optional(),
}).loose();

const SubFormSchema = z.object({
    name: z.string().nullable().optional(),
    label: z.string().nullable().optional(),
    sub_form_model_class: z.string(),
    sub_form_name: z.string(),
    method: z.string().nullable().optional(),
    children: z.array(FormChildSchema),
    template: z.string().nullable().optional(),
});

export const FormSchema = z.object({
    name: z.string(),
    // name_model: z.string(),
    // __name: z.string(),
    // is_web_compatible: z.string(),
    // is_mobile_compatible: z.string(),
    // rules_grid: z.string(),
    // rules: z.array(RuleSchema),
    // roles_grid: z.string(),
    // on_change_field_model: z.string(),
    // mapped_field_model: z.string(),
    // filter_field_model: z.string(),
    // filter_by_fields_model: z.string(),
    // container: z.string(),
    // allow_copy_to_clipboard: z.string(),
    // allow_user_to_specify_user_level_default: z.string(),
    // business_key: z.string(),
    // model_class: z.string(),
    template: z.string(),
    children: z.array(FormChildSchema),
    // inline_views_action: z.array(z.string()),
    labels: z.record(z.string(), z.string()),
    subforms: z.array(SubFormSchema).nullable().optional(),
    // form_metadata_id: z.string(),
    // form_view_href: z.string(),
    // field_request_status: z.string(),
    // field_request_message: z.string(),
    permission: z.union([z.number(), z.string()]).nullable().optional(),
    enable_split_layout: z.number().nullable(),
    form_id: z.string().nullable().optional(),
    steps: z.array(z.string()).optional(),
    step_number: z.number().optional(),
    total_step_numbers: z.number().optional(),
    href: z.string().optional(),
}).loose();

export const FormResponseSchema = z.object({
    data: z.record(z.string(), z.union([z.record(z.string(), z.any()), z.number(), z.string()])),
    filterRules: z.union([z.record(z.string(), z.union([z.object(), z.array(z.object({
        params: z.union([z.array(z.string()), z.object()]).nullable().optional(),
        rule: z.union([z.string(), z.number()]).nullable().optional(),
    }))])), z.array(z.string()).length(0)]),
    errors: z.array(z.string()),
    message: z.array(z.string()),
    primary_key: z.string(),
    display_field: z.string(),
    model: z.string(),
    // model_class: z.string(),
    id: z.union([z.string(), z.boolean()]).nullable().optional(),  // TODO: why boolean???
    is_record_deleted: z.boolean().nullable().optional(),
    permissions: z.union([z.array(z.any()), z.object()]),
    // is_pseudo_design_element: z.number(),
    name: z.union([z.string(), z.number()]),
    form: FormSchema,
    // allow_comments: z.number(),
    is_editable: z.number().nullable().optional(),
    is_deletable: z.number(),
    // current_form_page: z.string(),
    // singleton_key: z.string().nullable(),
    filter_form: FormSchema.nullable().optional(),
    // has_package: z.boolean(),
    // has_all_package: z.boolean(),
    // inherit_views: z.number(),
    alias: z.string(),
    // singular: z.string(),
    // controllerClass: z.string(),
    // modelClass: z.string(),
    notEmptyField: z.record(z.string(), z.any()),
    paginate: PaginateSchema.optional(),
});

export type FormResponse = z.infer<typeof FormResponseSchema>;